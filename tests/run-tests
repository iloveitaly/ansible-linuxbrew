#!/usr/bin/env bash

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT=$(dirname "${DIR}")

REPO_NAME="$(basename "${PROJECT_ROOT}")"
ROLE_NAME="markosamuli.${REPO_NAME/ansible-/}"
TEST_HOME=/home/test

docker_run_opts=()

# Ansible version to install on the Docker images
# Use PIP version specifiers:
# https://peps.python.org/pep-0440/#version-specifiers
ANSIBLE_VERSION=">=2.9.22"

# Colour list copied from:
# https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux

# Reset
Color_Off='\033[0m' # Text Reset

# Bold
BPurple='\033[1;35m' # Purple

image_msg() {
    local image=$1
    shift
    echo -e "${BPurple}[${image}] $*${Color_Off}"
}

# Detect Windows Subsystem for Linux
detect_wsl() {
    if [ ! -e /proc/version ]; then
        is_wsl=0
        return
    fi
    if grep -q Microsoft /proc/version; then
        echo "*** Windows Subsystem for Linux detected"
        is_wsl=1
    else
        is_wsl=0
    fi
}

# Stop all containers
finish() {
    local containers=""
    containers=$(docker ps -q --filter=name="${REPO_NAME}")
    if [ -n "${containers}" ]; then
        echo "*** Stop and remove all test containers"
        # shellcheck disable=SC2086
        docker stop ${containers}
    fi
}

# Stop container
stop() {
    local image=$1
    local container_name=${REPO_NAME}-${image}-tests
    echo ""
    image_msg "${image}" "Stop and remove containers"
    echo ""
    docker stop "${container_name}"
    sleep 1
}

# Build image
build() {
    local image=$1
    local image_name=${REPO_NAME}-${image}
    echo ""
    image_msg "${image}" "Build image from tests/${image}/Dockerfile"
    echo ""
    docker build \
        --build-arg "ansible_version=${ANSIBLE_VERSION}" \
        --build-arg "repository=${ROLE_NAME}" \
        -t "${image_name}" \
        "./tests/${image}"
}

# Start container in the background
start() {
    local image=$1
    local image_name=${REPO_NAME}-${image}
    local container_name=${REPO_NAME}-${image}-tests
    echo ""
    image_msg "${image}" "Start container ${container_name}"
    echo ""
    docker run --rm -d \
        "${docker_run_opts[@]}" \
        -v "${MOUNT_ROOT}:${TEST_HOME}/${ROLE_NAME}" \
        -e "TEST_IMAGE=${image}" \
        --name "${container_name}" \
        "$image_name"
}

run_tests_with_git() {
    local image=$1
    local container_name=${REPO_NAME}-${image}-tests
    echo ""
    image_msg "${image}" "Run tests installing with Ansible from Git"
    echo ""
    docker exec \
        "${docker_run_opts[@]}" \
        --user test \
        "${container_name}" \
        "${TEST_HOME}/${ROLE_NAME}/tests/run-tests-with-git"
}

run_tests_with_installer() {
    local image=$1
    local container_name=${REPO_NAME}-${image}-tests
    echo ""
    image_msg "${image}" "Run tests installing with the Linuxbrew installer"
    echo ""
    docker exec \
        "${docker_run_opts[@]}" \
        --user test \
        "${container_name}" \
        "${TEST_HOME}/${ROLE_NAME}/tests/run-tests-with-installer"
}

trap finish EXIT

if [ -z "$CI" ]; then
    docker_run_opts+=("-it")
fi

detect_wsl

cd "${DIR}" || {
    echo "${DIR} not found"
    exit 1
}

images=("$@")
if [ ${#images[@]} -eq 0 ]; then
    images=(*/Dockerfile)
    images=("${images[@]/\/Dockerfile/}")
fi

cd "${PROJECT_ROOT}" || {
    echo "${PROJECT_ROOT} not found"
    exit 1
}

if [ "${is_wsl}" == "1" ]; then
    MOUNT_ROOT="$(pwd -P | sed 's~/mnt/c/~c:/~')"
else
    MOUNT_ROOT="$(pwd -P)"
fi

set -e

for i in "${images[@]}"; do
    build "$i"
done

for i in "${images[@]}"; do
    start "$i"
    run_tests_with_git "$i"
    stop "$i"
done

for i in "${images[@]}"; do
    start "$i"
    run_tests_with_installer "$i"
    stop "$i"
done
